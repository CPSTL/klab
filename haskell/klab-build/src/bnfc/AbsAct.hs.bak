

module AbsAct where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype Symbol = Symbol String deriving (Eq, Ord, Show, Read)
data Act = Act Header Spec
  deriving (Eq, Ord, Show, Read)

data Spec = Spec Decls [Storage] [Cond]
  deriving (Eq, Ord, Show, Read)

data Type = Type_uint256 | Type_int256 | Type_address
  deriving (Eq, Ord, Show, Read)

data Arg = TypedArg Type Ident
  deriving (Eq, Ord, Show, Read)

data Decl = Decl Ident Type
  deriving (Eq, Ord, Show, Read)

data Decls = DsForall [Decl] | DsTypes [Decl] | DsEmpty
  deriving (Eq, Ord, Show, Read)

data Expr
    = KSymb Symbol Ident
    | KLParen
    | KRParen
    | KIdent Ident
    | KInt Integer
    | KString String
    | KTwo Expr Expr
  deriving (Eq, Ord, Show, Read)

data Storage = SThis [Expr] | SThat Ident [Expr]
  deriving (Eq, Ord, Show, Read)

data Cond = CIff [Expr] | CRange Type [Expr] | CIf [Expr]
  deriving (Eq, Ord, Show, Read)

data Header = Header Ident Ident Ident [Arg]
  deriving (Eq, Ord, Show, Read)

