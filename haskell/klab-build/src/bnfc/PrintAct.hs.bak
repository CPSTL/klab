{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintAct.
--   Generated by the BNF converter.

module PrintAct where

import AbsAct
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print Symbol where
  prt _ (Symbol i) = doc (showString i)

instance Print Act where
  prt i e = case e of
    Act header spec -> prPrec i 0 (concatD [prt 0 header, prt 0 spec])

instance Print Spec where
  prt i e = case e of
    Spec decls storages conds -> prPrec i 0 (concatD [prt 0 decls, prt 0 storages, prt 0 conds])

instance Print Type where
  prt i e = case e of
    Type_uint256 -> prPrec i 0 (concatD [doc (showString "uint256")])
    Type_int256 -> prPrec i 0 (concatD [doc (showString "int256")])
    Type_address -> prPrec i 0 (concatD [doc (showString "address")])

instance Print Arg where
  prt i e = case e of
    TypedArg type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arg] where
  prt = prtList

instance Print Decl where
  prt i e = case e of
    Decl id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Decl] where
  prt = prtList

instance Print Decls where
  prt i e = case e of
    DsForall decls -> prPrec i 0 (concatD [doc (showString "forall"), doc (showString "{"), prt 0 decls, doc (showString "}")])
    DsTypes decls -> prPrec i 0 (concatD [doc (showString "types"), doc (showString "{"), prt 0 decls, doc (showString "}")])
    DsEmpty -> prPrec i 0 (concatD [])

instance Print Expr where
  prt i e = case e of
    KSymb symbol id -> prPrec i 0 (concatD [prt 0 symbol, prt 0 id])
    KLParen -> prPrec i 0 (concatD [doc (showString "(")])
    KRParen -> prPrec i 0 (concatD [doc (showString ")")])
    KIdent id -> prPrec i 0 (concatD [prt 0 id])
    KInt n -> prPrec i 0 (concatD [prt 0 n])
    KString str -> prPrec i 0 (concatD [prt 0 str])
    KTwo expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Expr] where
  prt = prtList

instance Print Storage where
  prt i e = case e of
    SThis exprs -> prPrec i 0 (concatD [doc (showString "storage"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    SThat id exprs -> prPrec i 0 (concatD [prt 0 id, doc (showString "storage"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Storage] where
  prt = prtList

instance Print Cond where
  prt i e = case e of
    CIff exprs -> prPrec i 0 (concatD [doc (showString "iff"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    CRange type_ exprs -> prPrec i 0 (concatD [prt 0 type_, doc (showString "range"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    CIf exprs -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Cond] where
  prt = prtList

instance Print Header where
  prt i e = case e of
    Header id1 id2 id3 args -> prPrec i 0 (concatD [doc (showString "behaviour"), prt 0 id1, doc (showString "of"), prt 0 id2, doc (showString "interface"), prt 0 id3, doc (showString "("), prt 0 args, doc (showString ")")])

