module SkelAct where

-- Haskell module generated by the BNF converter

import AbsAct
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transSymbol :: Symbol -> Result
transSymbol x = case x of
  Symbol string -> failure x
transAct :: Act -> Result
transAct x = case x of
  Act header spec -> failure x
transSpec :: Spec -> Result
transSpec x = case x of
  Spec decls storages conds -> failure x
transType :: Type -> Result
transType x = case x of
  Type_uint256 -> failure x
  Type_int256 -> failure x
  Type_address -> failure x
transArg :: Arg -> Result
transArg x = case x of
  TypedArg type_ ident -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Decl ident type_ -> failure x
transDecls :: Decls -> Result
transDecls x = case x of
  DsForall decls -> failure x
  DsTypes decls -> failure x
  DsEmpty -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  KSymb symbol ident -> failure x
  KLParen -> failure x
  KRParen -> failure x
  KIdent ident -> failure x
  KInt integer -> failure x
  KString string -> failure x
  KTwo expr1 expr2 -> failure x
transStorage :: Storage -> Result
transStorage x = case x of
  SThis exprs -> failure x
  SThat ident exprs -> failure x
transCond :: Cond -> Result
transCond x = case x of
  CIff exprs -> failure x
  CRange type_ exprs -> failure x
  CIf exprs -> failure x
transHeader :: Header -> Result
transHeader x = case x of
  Header ident1 ident2 ident3 args -> failure x

