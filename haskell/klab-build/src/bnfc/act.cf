comment "//" ;
comment "/*" "*/" ;

Act. Act ::= Header Spec ;
entrypoints Act ;

Spec. Spec ::= Decls
               [Storage]
               [Cond] ;

rules Type ::= "uint256"
             | "int256"
             | "address" ;
 
TypedArg. Arg ::= Type Ident ;
separator Arg "," ;
 
Decl. Decl ::= Ident ":" Type ;
separator Decl ";" ;
 
DsForall. Decls ::= "forall" "{" [Decl] "}" ;
DsTypes.  Decls ::= "types" "{" [Decl] "}" ;
DsEmpty.  Decls ::= ;
layout "forall", "types" ;

token Symbol ( (["!#$%&/()=+?,.:-_'*<>|[]"])+ ) ;

KSymb.  Expr ::= Symbol Ident ;
KLParen. Expr ::= "(" ; -- Necessary because
KRParen. Expr ::= ")" ; -- these are already
KComma.  Expr ::= "," ; -- defined terminals
KIdent. Expr ::= Ident ;
KInt.   Expr ::= Integer ;
KString. Expr ::= String ;
KTwo.   Expr ::= Expr Expr ;
separator Expr ";" ;
--separator [Expr] ";" ;
















 
--MConst.   Mapping ::= [Expr] "|->" [Expr] ;
--MRewrite. Mapping ::= [Expr] "|->" [Expr] "=>" [Expr] ;
--separator Mapping ";" ;
 
SThis. Storage ::= "storage" "{" [Expr] "}" ;
SThat. Storage ::= Ident "storage" "{" [Expr] "}" ;
separator Storage "" ;
layout "storage" ;
 
CIff.   Cond ::= "iff" "{" [Expr] "}" ;
CRange. Cond ::= Type "range" "{" [Expr] "}" ;
CIf.    Cond ::= "if" "{" [Expr] "}" ;
terminator Cond "" ;
layout "iff", "if", "range" ;

Header. Header ::= "behaviour" Ident "of" Ident "\n"
              "interface" Ident "(" [Arg] ")" ;



--token KExpr ((' ' | '\t')+ (letter | digit | ["\t _-()[],.;:|\\/<>=!\"#$%&?*+"])+) ; 

