-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParAct.y
-----------------------------------------------------------------------------


rule 4 is unused
rule 5 is unused
rule 6 is unused

terminal '#' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pAct -> Act                                 (0)
	Ident -> L_ident                                   (1)
	KExpr -> L_KExpr                                   (2)
	Act -> Header Spec                                 (3)
	Name -> Ident                                      (4)
	Name -> Type                                       (5)
	Name -> '#' Name                                   (6)
	Spec -> Decls ListStorage ListCond                 (7)
	Type -> 'uint'                                     (8)
	Type -> 'uint256'                                  (9)
	Type -> 'int256'                                   (10)
	Type -> 'address'                                  (11)
	Arg -> Type Ident                                  (12)
	ListArg ->                                         (13)
	ListArg -> Arg                                     (14)
	ListArg -> Arg ',' ListArg                         (15)
	Decl -> Ident ':' Type                             (16)
	ListDecl ->                                        (17)
	ListDecl -> ListDecl Decl                          (18)
	Decls -> 'forall' ListDecl                         (19)
	Decls -> 'types' ListDecl                          (20)
	Decls ->                                           (21)
	Expr -> KExpr                                      (22)
	ListExpr ->                                        (23)
	ListExpr -> ListExpr Expr                          (24)
	Mapping -> Expr '|->' Expr                         (25)
	Mapping -> Expr '|->' Expr '=>' Expr               (26)
	ListMapping ->                                     (27)
	ListMapping -> ListMapping Mapping ';'             (28)
	Storage -> 'storage' ListMapping                   (29)
	Storage -> 'storage' Ident ListMapping             (30)
	ListStorage ->                                     (31)
	ListStorage -> ListStorage Storage                 (32)
	Cond -> 'iff' ListExpr                             (33)
	Cond -> 'iff' 'in' 'range' Type ListExpr           (34)
	Cond -> 'if' ListExpr                              (35)
	ListCond ->                                        (36)
	ListCond -> ListCond Cond                          (37)
	Header -> 'behaviour' Ident 'of' Ident 'interface' Ident '(' ListArg ')'   (38)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'#'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	','            { PT _ (TS _ 4) }
	':'            { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'=>'           { PT _ (TS _ 7) }
	'address'      { PT _ (TS _ 8) }
	'behaviour'    { PT _ (TS _ 9) }
	'forall'       { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'iff'          { PT _ (TS _ 12) }
	'in'           { PT _ (TS _ 13) }
	'int256'       { PT _ (TS _ 14) }
	'interface'    { PT _ (TS _ 15) }
	'of'           { PT _ (TS _ 16) }
	'range'        { PT _ (TS _ 17) }
	'storage'      { PT _ (TS _ 18) }
	'types'        { PT _ (TS _ 19) }
	'uint'         { PT _ (TS _ 20) }
	'uint256'      { PT _ (TS _ 21) }
	'|->'          { PT _ (TS _ 22) }
	L_ident        { PT _ (TV $$) }
	L_KExpr        { PT _ (T_KExpr $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pAct     rule  0
	Ident           rule  1
	KExpr           rule  2
	Act             rule  3
	Name            rules 4, 5, 6
	Spec            rule  7
	Type            rules 8, 9, 10, 11
	Arg             rule  12
	ListArg         rules 13, 14, 15
	Decl            rule  16
	ListDecl        rules 17, 18
	Decls           rules 19, 20, 21
	Expr            rule  22
	ListExpr        rules 23, 24
	Mapping         rules 25, 26
	ListMapping     rules 27, 28
	Storage         rules 29, 30
	ListStorage     rules 31, 32
	Cond            rules 33, 34, 35
	ListCond        rules 36, 37
	Header          rule  38

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'behaviour'    shift, and enter state 5

	Act            goto state 3
	Header         goto state 4

State 1


	L_ident        shift, and enter state 2


State 2

	Ident -> L_ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	':'            reduce using rule 1
	'if'           reduce using rule 1
	'iff'          reduce using rule 1
	'interface'    reduce using rule 1
	'of'           reduce using rule 1
	'storage'      reduce using rule 1
	L_KExpr        reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pAct -> Act .                                (rule 0)

	%eof           accept


State 4

	Act -> Header . Spec                                (rule 3)

	'forall'       shift, and enter state 9
	'if'           reduce using rule 21
	'iff'          reduce using rule 21
	'storage'      reduce using rule 21
	'types'        shift, and enter state 10
	%eof           reduce using rule 21

	Spec           goto state 7
	Decls          goto state 8

State 5

	Header -> 'behaviour' . Ident 'of' Ident 'interface' Ident '(' ListArg ')'    (rule 38)

	L_ident        shift, and enter state 2

	Ident          goto state 6

State 6

	Header -> 'behaviour' Ident . 'of' Ident 'interface' Ident '(' ListArg ')'    (rule 38)

	'of'           shift, and enter state 14


State 7

	Act -> Header Spec .                                (rule 3)

	%eof           reduce using rule 3


State 8

	Spec -> Decls . ListStorage ListCond                (rule 7)

	'if'           reduce using rule 31
	'iff'          reduce using rule 31
	'storage'      reduce using rule 31
	%eof           reduce using rule 31

	ListStorage    goto state 13

State 9

	Decls -> 'forall' . ListDecl                        (rule 19)

	'if'           reduce using rule 17
	'iff'          reduce using rule 17
	'storage'      reduce using rule 17
	L_ident        reduce using rule 17
	%eof           reduce using rule 17

	ListDecl       goto state 12

State 10

	Decls -> 'types' . ListDecl                         (rule 20)

	'if'           reduce using rule 17
	'iff'          reduce using rule 17
	'storage'      reduce using rule 17
	L_ident        reduce using rule 17
	%eof           reduce using rule 17

	ListDecl       goto state 11

State 11

	ListDecl -> ListDecl . Decl                         (rule 18)
	Decls -> 'types' ListDecl .                         (rule 20)

	'if'           reduce using rule 20
	'iff'          reduce using rule 20
	'storage'      reduce using rule 20
	L_ident        shift, and enter state 2
	%eof           reduce using rule 20

	Ident          goto state 19
	Decl           goto state 20

State 12

	ListDecl -> ListDecl . Decl                         (rule 18)
	Decls -> 'forall' ListDecl .                        (rule 19)

	'if'           reduce using rule 19
	'iff'          reduce using rule 19
	'storage'      reduce using rule 19
	L_ident        shift, and enter state 2
	%eof           reduce using rule 19

	Ident          goto state 19
	Decl           goto state 20

State 13

	Spec -> Decls ListStorage . ListCond                (rule 7)
	ListStorage -> ListStorage . Storage                (rule 32)

	'if'           reduce using rule 36
	'iff'          reduce using rule 36
	'storage'      shift, and enter state 18
	%eof           reduce using rule 36

	Storage        goto state 16
	ListCond       goto state 17

State 14

	Header -> 'behaviour' Ident 'of' . Ident 'interface' Ident '(' ListArg ')'    (rule 38)

	L_ident        shift, and enter state 2

	Ident          goto state 15

State 15

	Header -> 'behaviour' Ident 'of' Ident . 'interface' Ident '(' ListArg ')'    (rule 38)

	'interface'    shift, and enter state 27


State 16

	ListStorage -> ListStorage Storage .                (rule 32)

	'if'           reduce using rule 32
	'iff'          reduce using rule 32
	'storage'      reduce using rule 32
	%eof           reduce using rule 32


State 17

	Spec -> Decls ListStorage ListCond .                (rule 7)
	ListCond -> ListCond . Cond                         (rule 37)

	'if'           shift, and enter state 25
	'iff'          shift, and enter state 26
	%eof           reduce using rule 7

	Cond           goto state 24

State 18

	Storage -> 'storage' . ListMapping                  (rule 29)
	Storage -> 'storage' . Ident ListMapping            (rule 30)

	'if'           reduce using rule 27
	'iff'          reduce using rule 27
	'storage'      reduce using rule 27
	L_ident        shift, and enter state 2
	L_KExpr        reduce using rule 27
	%eof           reduce using rule 27

	Ident          goto state 22
	ListMapping    goto state 23

State 19

	Decl -> Ident . ':' Type                            (rule 16)

	':'            shift, and enter state 21


State 20

	ListDecl -> ListDecl Decl .                         (rule 18)

	'if'           reduce using rule 18
	'iff'          reduce using rule 18
	'storage'      reduce using rule 18
	L_ident        reduce using rule 18
	%eof           reduce using rule 18


State 21

	Decl -> Ident ':' . Type                            (rule 16)

	'address'      shift, and enter state 38
	'int256'       shift, and enter state 39
	'uint'         shift, and enter state 40
	'uint256'      shift, and enter state 41

	Type           goto state 37

State 22

	Storage -> 'storage' Ident . ListMapping            (rule 30)

	'if'           reduce using rule 27
	'iff'          reduce using rule 27
	'storage'      reduce using rule 27
	L_KExpr        reduce using rule 27
	%eof           reduce using rule 27

	ListMapping    goto state 36

State 23

	ListMapping -> ListMapping . Mapping ';'            (rule 28)
	Storage -> 'storage' ListMapping .                  (rule 29)

	'if'           reduce using rule 29
	'iff'          reduce using rule 29
	'storage'      reduce using rule 29
	L_KExpr        shift, and enter state 35
	%eof           reduce using rule 29

	KExpr          goto state 32
	Expr           goto state 33
	Mapping        goto state 34

State 24

	ListCond -> ListCond Cond .                         (rule 37)

	'if'           reduce using rule 37
	'iff'          reduce using rule 37
	%eof           reduce using rule 37


State 25

	Cond -> 'if' . ListExpr                             (rule 35)

	'if'           reduce using rule 23
	'iff'          reduce using rule 23
	L_KExpr        reduce using rule 23
	%eof           reduce using rule 23

	ListExpr       goto state 31

State 26

	Cond -> 'iff' . ListExpr                            (rule 33)
	Cond -> 'iff' . 'in' 'range' Type ListExpr          (rule 34)

	'if'           reduce using rule 23
	'iff'          reduce using rule 23
	'in'           shift, and enter state 30
	L_KExpr        reduce using rule 23
	%eof           reduce using rule 23

	ListExpr       goto state 29

State 27

	Header -> 'behaviour' Ident 'of' Ident 'interface' . Ident '(' ListArg ')'    (rule 38)

	L_ident        shift, and enter state 2

	Ident          goto state 28

State 28

	Header -> 'behaviour' Ident 'of' Ident 'interface' Ident . '(' ListArg ')'    (rule 38)

	'('            shift, and enter state 46


State 29

	ListExpr -> ListExpr . Expr                         (rule 24)
	Cond -> 'iff' ListExpr .                            (rule 33)

	'if'           reduce using rule 33
	'iff'          reduce using rule 33
	L_KExpr        shift, and enter state 35
	%eof           reduce using rule 33

	KExpr          goto state 32
	Expr           goto state 44

State 30

	Cond -> 'iff' 'in' . 'range' Type ListExpr          (rule 34)

	'range'        shift, and enter state 45


State 31

	ListExpr -> ListExpr . Expr                         (rule 24)
	Cond -> 'if' ListExpr .                             (rule 35)

	'if'           reduce using rule 35
	'iff'          reduce using rule 35
	L_KExpr        shift, and enter state 35
	%eof           reduce using rule 35

	KExpr          goto state 32
	Expr           goto state 44

State 32

	Expr -> KExpr .                                     (rule 22)

	';'            reduce using rule 22
	'=>'           reduce using rule 22
	'if'           reduce using rule 22
	'iff'          reduce using rule 22
	'|->'          reduce using rule 22
	L_KExpr        reduce using rule 22
	%eof           reduce using rule 22


State 33

	Mapping -> Expr . '|->' Expr                        (rule 25)
	Mapping -> Expr . '|->' Expr '=>' Expr              (rule 26)

	'|->'          shift, and enter state 43


State 34

	ListMapping -> ListMapping Mapping . ';'            (rule 28)

	';'            shift, and enter state 42


State 35

	KExpr -> L_KExpr .                                  (rule 2)

	';'            reduce using rule 2
	'=>'           reduce using rule 2
	'if'           reduce using rule 2
	'iff'          reduce using rule 2
	'|->'          reduce using rule 2
	L_KExpr        reduce using rule 2
	%eof           reduce using rule 2


State 36

	ListMapping -> ListMapping . Mapping ';'            (rule 28)
	Storage -> 'storage' Ident ListMapping .            (rule 30)

	'if'           reduce using rule 30
	'iff'          reduce using rule 30
	'storage'      reduce using rule 30
	L_KExpr        shift, and enter state 35
	%eof           reduce using rule 30

	KExpr          goto state 32
	Expr           goto state 33
	Mapping        goto state 34

State 37

	Decl -> Ident ':' Type .                            (rule 16)

	'if'           reduce using rule 16
	'iff'          reduce using rule 16
	'storage'      reduce using rule 16
	L_ident        reduce using rule 16
	%eof           reduce using rule 16


State 38

	Type -> 'address' .                                 (rule 11)

	'if'           reduce using rule 11
	'iff'          reduce using rule 11
	'storage'      reduce using rule 11
	L_ident        reduce using rule 11
	L_KExpr        reduce using rule 11
	%eof           reduce using rule 11


State 39

	Type -> 'int256' .                                  (rule 10)

	'if'           reduce using rule 10
	'iff'          reduce using rule 10
	'storage'      reduce using rule 10
	L_ident        reduce using rule 10
	L_KExpr        reduce using rule 10
	%eof           reduce using rule 10


State 40

	Type -> 'uint' .                                    (rule 8)

	'if'           reduce using rule 8
	'iff'          reduce using rule 8
	'storage'      reduce using rule 8
	L_ident        reduce using rule 8
	L_KExpr        reduce using rule 8
	%eof           reduce using rule 8


State 41

	Type -> 'uint256' .                                 (rule 9)

	'if'           reduce using rule 9
	'iff'          reduce using rule 9
	'storage'      reduce using rule 9
	L_ident        reduce using rule 9
	L_KExpr        reduce using rule 9
	%eof           reduce using rule 9


State 42

	ListMapping -> ListMapping Mapping ';' .            (rule 28)

	'if'           reduce using rule 28
	'iff'          reduce using rule 28
	'storage'      reduce using rule 28
	L_KExpr        reduce using rule 28
	%eof           reduce using rule 28


State 43

	Mapping -> Expr '|->' . Expr                        (rule 25)
	Mapping -> Expr '|->' . Expr '=>' Expr              (rule 26)

	L_KExpr        shift, and enter state 35

	KExpr          goto state 32
	Expr           goto state 51

State 44

	ListExpr -> ListExpr Expr .                         (rule 24)

	'if'           reduce using rule 24
	'iff'          reduce using rule 24
	L_KExpr        reduce using rule 24
	%eof           reduce using rule 24


State 45

	Cond -> 'iff' 'in' 'range' . Type ListExpr          (rule 34)

	'address'      shift, and enter state 38
	'int256'       shift, and enter state 39
	'uint'         shift, and enter state 40
	'uint256'      shift, and enter state 41

	Type           goto state 50

State 46

	Header -> 'behaviour' Ident 'of' Ident 'interface' Ident '(' . ListArg ')'    (rule 38)

	')'            reduce using rule 13
	'address'      shift, and enter state 38
	'int256'       shift, and enter state 39
	'uint'         shift, and enter state 40
	'uint256'      shift, and enter state 41

	Type           goto state 47
	Arg            goto state 48
	ListArg        goto state 49

State 47

	Arg -> Type . Ident                                 (rule 12)

	L_ident        shift, and enter state 2

	Ident          goto state 56

State 48

	ListArg -> Arg .                                    (rule 14)
	ListArg -> Arg . ',' ListArg                        (rule 15)

	')'            reduce using rule 14
	','            shift, and enter state 55


State 49

	Header -> 'behaviour' Ident 'of' Ident 'interface' Ident '(' ListArg . ')'    (rule 38)

	')'            shift, and enter state 54


State 50

	Cond -> 'iff' 'in' 'range' Type . ListExpr          (rule 34)

	'if'           reduce using rule 23
	'iff'          reduce using rule 23
	L_KExpr        reduce using rule 23
	%eof           reduce using rule 23

	ListExpr       goto state 53

State 51

	Mapping -> Expr '|->' Expr .                        (rule 25)
	Mapping -> Expr '|->' Expr . '=>' Expr              (rule 26)

	';'            reduce using rule 25
	'=>'           shift, and enter state 52


State 52

	Mapping -> Expr '|->' Expr '=>' . Expr              (rule 26)

	L_KExpr        shift, and enter state 35

	KExpr          goto state 32
	Expr           goto state 58

State 53

	ListExpr -> ListExpr . Expr                         (rule 24)
	Cond -> 'iff' 'in' 'range' Type ListExpr .          (rule 34)

	'if'           reduce using rule 34
	'iff'          reduce using rule 34
	L_KExpr        shift, and enter state 35
	%eof           reduce using rule 34

	KExpr          goto state 32
	Expr           goto state 44

State 54

	Header -> 'behaviour' Ident 'of' Ident 'interface' Ident '(' ListArg ')' .    (rule 38)

	'forall'       reduce using rule 38
	'if'           reduce using rule 38
	'iff'          reduce using rule 38
	'storage'      reduce using rule 38
	'types'        reduce using rule 38
	%eof           reduce using rule 38


State 55

	ListArg -> Arg ',' . ListArg                        (rule 15)

	')'            reduce using rule 13
	'address'      shift, and enter state 38
	'int256'       shift, and enter state 39
	'uint'         shift, and enter state 40
	'uint256'      shift, and enter state 41

	Type           goto state 47
	Arg            goto state 48
	ListArg        goto state 57

State 56

	Arg -> Type Ident .                                 (rule 12)

	')'            reduce using rule 12
	','            reduce using rule 12


State 57

	ListArg -> Arg ',' ListArg .                        (rule 15)

	')'            reduce using rule 15


State 58

	Mapping -> Expr '|->' Expr '=>' Expr .              (rule 26)

	';'            reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 39
Number of terminals: 24
Number of non-terminals: 21
Number of states: 59
