comment "//" ;
comment "/*" "*/" ;

Act. Act ::= Header Spec ;

KName. Name ::= Ident ;
TypeName. Name ::= Type ;
_.     Name ::= "#" Name ;

Spec. Spec ::= Decls
               [Storage]
               [Cond] ;

TUInt.    Type ::= "uint" ;
TUInt256. Type ::= "uint256" ;
TInt256.  Type ::= "int256" ;
TAddress. Type ::= "address" ;
 
TypedArg. Arg ::= Type Ident ;
separator Arg "," ;
 
Decl. Decl ::= Ident ":" Type ;
separator Decl "" ;
 
DsForall. Decls ::= "forall" [Decl] ;
DsTypes.  Decls ::= "types"  [Decl] ;
DsEmpty.  Decls ::= ;

EVar.    Expr3 ::= Name ;
EInt.    Expr3 ::= Integer ;
EString. Expr3 ::= String ;
ECall.   Expr3 ::= Name "(" [Expr] ")" ;
EMul.    Expr2 ::= Expr2 "*"   Expr3 ;
EDiv.    Expr2 ::= Expr2 "/"   Expr3 ;
EAdd.    Expr1 ::= Expr1 "+"   Expr2 ;
ESub.    Expr1 ::= Expr1 "-"   Expr2 ;
EEq.     Expr  ::= Expr1 "=="  Expr1 ;
ENeq.    Expr  ::= Expr1 "=/=" Expr1 ;
EGt.     Expr  ::= Expr1 ">"   Expr1 ;
EGteq.   Expr  ::= Expr1 ">="  Expr1 ;
ELt.     Expr  ::= Expr1 "<"   Expr1 ;
ELteq.   Expr  ::= Expr1 "<="  Expr1 ;
coercions Expr 3 ;
--_. Expr  ::= Expr1 ;
--_. Expr1 ::= Expr2 ;
--_. Expr2 ::= Expr3 ;
--_. Expr3 ::= Expr4 ;
--_. Expr4 ::= "[" Expr "]" ;
separator Expr "," ;
 
MConst.   Mapping ::= Expr "|->" Expr ;
MRewrite. Mapping ::= Expr "|->" Expr "=>" Expr ;
terminator Mapping ";" ;
 
SThis. Storage ::= "storage" [Mapping] ;
SThat. Storage ::= "storage" Ident [Mapping] ;
separator Storage "" ;
 
CIff.   Cond ::= "iff" [Expr] ;
CRange. Cond ::= "iff" "in" "range" Type [Expr] ;
CIf.    Cond ::= "if" [Expr] ;
terminator Cond "" ;

Header. Header ::= "behaviour" Ident "of" Ident "\n"
              "interface" Ident "(" [Arg] ")" ;




