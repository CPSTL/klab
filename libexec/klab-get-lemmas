#!/usr/bin/env node
// TODO - compile needs to carry on the act

const fs = require("fs");
const path = require("path");
const {docopt}      = require("docopt");
const {
  testPath,
  read,
  revert,
} = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";
const KLAB_WD_PATH = path.join(KLAB_OUT, "data");

const usage = `
Usage:
  klab get-lemmas <hash>
`

const cmd = docopt(usage, {
  argv: ["get-lemmas"].concat(process.argv.slice(2))
});
const proofid = cmd['<hash>']

const logfile = path.join(KLAB_WD_PATH, proofid + ".log")
testPath(logfile) || revert("klab-get-lemmas: no logfile for " + proofid)

const rule_stats = read(logfile)
  .split("\n")
  .filter(l => !!l)
  .filter(l => l.split(" ")[1] == "SRULE")
  .map(l => l.split(" ")[2].split("_")[0])
  // .filter((v, i, a) => a.indexOf(v) == i)
  .map(r => JSON.parse(read(path.join(KLAB_WD_PATH, proofid + "_blobs", r + ".json"))).term.att.split(" ").find(s => new RegExp(`^label\\(.*\\)`).test(s)))
  .filter(s => !!s)
  .map(s => s.match(new RegExp('^label\\(.*?\\.(.*)\\)'))[1].replace(/\./g, "_"))
  .reduce((a, l) => {
    a[l] = (a[l]||0) + 1;
    return a;
  }, {})

if(Object.keys(rule_stats).length > 0) fs.writeFileSync(path.join(KLAB_OUT, "log", proofid + "_lemma_stats.json"), JSON.stringify(rule_stats))
