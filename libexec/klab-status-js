#!/usr/bin/env node
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const path = require("path");
process.title = "klab";

const format = require("../lib/format.js")
const { genBehaviour } = require("../lib/behavior.js");
const {
  prune_edges,
} = require("../lib/compile.js");
const {
  testPath,
  read
} = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";
const KLAB_WD_PATH = path.join(KLAB_OUT, "data");

const usage = `
Usage:
  klab status-js [<hash>]
`

const cmd = docopt(usage, {
  argv: ["status-js"].concat(process.argv.slice(2))
});

const proofid = cmd['<hash>'] || process.env.KLAB_HEAD || (testPath(path.join(KLAB_OUT, "HEAD")) && read(path.join(KLAB_OUT, "HEAD"))).trim();

const {pruned_edges, initt, finished, steps, rule_debug} = prune_edges(proofid);
const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});
const steps_ = steps
  .reduce((a, step) => { a[step] = true; return a; }, {});


const debug_constraints = {};
const debug_rules = {};

Object.keys(rule_debug)
  .forEach(nodeid => Object.keys(rule_debug[nodeid])
    .forEach(ruleid => {
      debug_rules[ruleid] = true;
      Object.keys(rule_debug[nodeid][ruleid])
      .forEach(constraintid => {
        debug_constraints[constraintid] = true;
        Object.keys(rule_debug[nodeid][ruleid][constraintid] || {})
          .forEach(z3id => {
            let z3result = rule_debug[nodeid][ruleid][constraintid][z3id]
            debug_constraints[z3result] = true;
          })
      })
    })
  )

const status = testPath(path.join(KLAB_OUT, 'pass', proofid)) && 'pass'
    || (testPath(path.join(KLAB_OUT, 'fail', proofid)) && 'fail')
    || (testPath(path.join(KLAB_OUT, 'meta', 'running', proofid)) && 'running')
    || 'unknown'


const rule_blobs_O = debug_rules
const constraint_blobs_O = debug_constraints;

Object.keys(pruned_edges)
  .forEach(ekey => {
    pruned_edges[ekey]
      .forEach(edge => {
        constraint_blobs_O[edge.from.split('_')[1]] = true;
        constraint_blobs_O[edge.to.split('_')[1]] = true;
        rule_blobs_O[edge.rule] = true;
      })
  });
const rule_blobs = Object.keys(rule_blobs_O)
const constraint_blobs = Object.keys(constraint_blobs_O);
// preload constraints and rules

const E = pruned_edges;
const traverse = (firstNode) => {
  var c = firstNode;
  while(c in E && E[c].length == 1) {
    c = E[c][0].to;
  }
  let b = "";
  return (!(c in E) || E[c].length == 0)
    && [c.split('_')[0]]
    || E[c]
      .map(step => traverse(step.to))
      .reduce((a, e) => a.concat(e), [])
}

const blobs_data = constraint_blobs.concat(traverse(initt))
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])
  .reduce((a, [id, json]) => ({...a, [id]: json.term}), {})

const rules_data = rule_blobs
  .map(blobid => [blobid, JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}_blobs`, blobid + ".json")))])
  .reduce((a, [id, json]) => ({...a, [id]: json.term}), {})

const state = {
  edges: pruned_edges,      // done: klab compile-fsm
  initt,                    // done: klab compile-fsm
  rule_debug,
  finished: finished_,      // done: klab compile-fsm
  steps: steps_,
  nodes: blobs_data,
  rules: rules_data,
  status,
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const styles = node => !node && 22
  || node.branching && 215
  || node.in_history && 255 // 77
  || node.active && 244
  || 234

const { behaviour } = genBehaviour(state);

const table = format.foldPreorder({
  tree: JSON.parse(JSON.stringify(behaviour)),
  loc: "head",
  styles
})
console.log(format
  .formatDb(table, ["head", "deltaC"], styles)
  .split("\n")
  .join("\n  "))

